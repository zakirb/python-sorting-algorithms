function merge(left_array, right_array) {
  // Base cases
  var smallest_number = 0;
  if (right_array.length === 0) {
    return left_array; // We have nothing to compare. Left wins.
  }
  if (left_array.length === 0) {
    return right_array; // We have nothing to compare. Right wins.
  }
  // Get the lowest value and remove it from the array
  if (left_array[0] <= right_array[0]) {
    smallest_number = left_array.shift();
  } else {
    smallest_number = right_array.shift();
  }
  // We keep doing it until the left or right array is empty.
  merged = merge(left_array, right_array);
  merged.unshift(smallest_number);
  // Okay, either left or right array are empty at this point. So we have a result.
  return merged;
}

function mergeSort(arr) {
  // base case:
  // an array of 1 or fewer elements is, by definition, sorted.
  if (arr.length <= 1) {
    return arr;
  }
  // Get the middle index
  var mid = Math.round(arr.length / 2);
  // Divide the array into left and right sides
  var leftArray = arr.slice(0, mid);
  var rightArray = arr.slice(mid, arr.length);
  // Call mergeSort on each side
  var sortedLeftArray = mergeSort(leftArray);
  var sortedRightArray = mergeSort(rightArray);

  return merge(sortedLeftArray, sortedRightArray);
}

var myList = [413, 445, 403, 224, 157, 312, 785, 862, 602, 354, 90, 442, 458, 641,
  595, 441, 661, 690, 963, 376, 840, 463, 514, 919, 789, 423, 81, 272, 46, 981, 375, 70, 139, 955, 399, 179, 346,
  369, 827, 171, 460, 982, 721, 631, 218, 200, 163, 510, 56, 30, 490, 320, 326, 327, 161, 586, 949, 244, 857, 750,
  290, 716, 511, 573, 96, 340, 78, 800, 821, 417, 627, 847, 906, 672, 294, 279, 554, 709, 731, 344, 449, 790, 231,
  307, 39, 574, 566, 941, 72, 884, 763, 486, 66, 578, 261, 723, 914, 104, 256, 600, 32, 358, 762, 526, 495, 367,
  2, 875, 500, 165, 813, 172, 419, 616, 809, 699, 908, 945, 381, 742, 408, 575, 260, 468, 1, 959, 969, 755, 492,
  135, 714, 624, 648, 336, 298, 464, 922, 18, 635, 874, 45, 370, 647, 769, 347, 772, 479, 140, 412, 118, 415, 170,
  596, 798, 420, 250, 406, 73, 839, 656, 662, 512, 444, 324, 659, 363, 60, 69, 74, 633, 845, 537, 466, 19, 421,
  844, 362, 166, 430, 62, 503, 202, 175, 888, 257, 696, 125, 206, 300, 726, 803, 836, 644, 741, 150, 353, 443, 233, 323, 396, 454, 356, 751, 31, 724, 747,
  666, 236,
  131, 151, 848, 736, 704, 240, 728, 299, 568, 990, 892, 855, 920, 424, 950, 379, 319, 304, 665, 766, 207, 846, 398, 730, 828, 177, 88, 5, 540, 44, 707, 54,
  329,
  357, 858, 132, 913, 84, 100, 680, 816, 551, 225, 305, 122, 757, 291, 478, 310, 583, 743, 205, 41, 186, 866, 655, 547, 764, 694, 748, 284, 8, 107, 562, 749,
  679, 673, 833, 351,
  28, 245, 143, 902, 20, 642, 784, 791, 604, 998, 893, 531, 989, 783, 980, 612, 221, 960, 964, 475, 268, 251, 416, 7, 992, 570, 293, 119, 116, 133, 29, 501,
  316,
  987, 713, 660, 504, 410, 541, 405, 418, 601, 465, 832, 854, 338, 863, 865, 219, 453, 469, 296, 975, 843, 653, 43, 211, 1000, 437, 619, 232, 685, 439, 447,
  899, 697,
  249, 876, 814, 801, 128, 13, 782, 237, 947, 489, 628, 544, 905, 303, 988, 390, 753, 470, 572, 10, 582, 431, 203, 180, 560, 141, 546, 65, 123, 695, 860, 598,
  350, 111, 330,
  943, 183, 51, 525, 775, 508, 923, 451, 682, 289, 138, 557, 640, 274, 49, 808, 286, 102, 173, 422, 456, 886, 273, 881, 765, 872, 308, 306, 35, 608, 334, 539,
  625,
  212, 455, 414, 850, 195, 711, 794, 282, 129, 335, 137, 962, 932, 811, 958, 101, 333, 188, 283, 771, 907, 677, 585, 227, 795, 168, 768, 910, 190, 997, 977, 281,
  228,
  254, 382, 158, 497, 38, 693, 687, 719, 933, 651, 758, 754, 868, 532, 965, 530, 820, 167, 159, 861, 930, 86, 246, 427, 343, 520, 124, 545, 95, 607, 924, 387, 404,
  621,
  113, 302, 611, 34];

// var a = [42, 13, 20];
console.log( mergeSort(myList) ); // => [1, 4, 10, 19, 39, 49, 92, 93]
